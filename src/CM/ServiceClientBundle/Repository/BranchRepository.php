<?php

namespace CM\ServiceClientBundle\Repository;

use Doctrine\ORM\EntityManager;
use CM\ServiceClientBundle\Entity\Branch;


/**
 * BranchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchRepository extends \Doctrine\ORM\EntityRepository
{
    private $entityManager;

    public function __construct(EntityManager $entityManager){
        $this->entityManager = $entityManager;
    }

    /**
     * @return array|Branch[]
     */
    public function findAll(){
        return $this->entityManager->getRepository('ServiceClientBundle:Branch')->findAll();
    }

    public function findAllWithParent(){
        $q = $this->entityManager->createQueryBuilder();
        $q->select('b')
            ->from('ServiceClientBundle:Branch', 'b')
            ->leftJoin('b.children', 'c')
        ;

        $branches = $q->getQuery()->getResult();

        return $branches;
    }

    public function findByEntityToArray(){
        $q = $this->entityManager->createQueryBuilder();
        $q->select('b')
            ->from('ServiceClientBundle:Branch', 'b')
        ;

        $branches = $q->getQuery()->getArrayResult();

        return $branches;
    }
    
    public function FindSolution(Branch $branch){
        $id = $branch->getId();
        $q = $this->entityManager->createQueryBuilder();
        $q->select('s')
            ->from('ServiceClientBundle:Solution', 's')
            ->leftJoin('s.branche', 'b')
            ->where('b.id = :id')
            ->setParameter('id', $id)                      
        ;

        $solutions = $q->getQuery()->getResult();

        return $solutions;
    }

    public function save(Branch $branch){
        $this->entityManager->persist($branch);
        $this->entityManager->flush();
    }

    public function delete(Branch $branch){
        $this->entityManager->remove($branch);
        $this->entityManager->flush();
    }
}
